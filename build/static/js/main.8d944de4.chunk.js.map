{"version":3,"sources":["QuoteList.js","Quote.js","App.js","serviceWorker.js","index.js"],"names":["quotes","quote","author","Fade","styled","div","keyframes","fadeIn","Quote","this","props","handleGenerate","number","class","style","display","flexWrap","justifyContent","onClick","className","React","Component","App","state","fade","pastNum","randNum","Math","floor","random","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAmFeA,EAnFA,CACX,CACIC,MAAO,wEACPC,OAAQ,iBAEZ,CACID,MAAO,4FACPC,OAAQ,uBAEZ,CACID,MAAO,yJACPC,OAAQ,uBAEZ,CACID,MAAO,4FACPC,OAAQ,kBAEZ,CACID,MAAO,6DACPC,OAAQ,eAEZ,CACID,MAAO,oKACPC,OAAQ,cAEZ,CACID,MAAO,6EACPC,OAAQ,qBAEZ,CACID,MAAO,uIACPC,OAAQ,iBAEZ,CACID,MAAO,2GACPC,OAAQ,iBAEZ,CACID,MAAO,4DACPC,OAAQ,eAEZ,CACID,MAAO,sFACPC,OAAQ,iBAEZ,CACID,MAAO,qEACPC,OAAQ,yBAEZ,CACID,MAAO,2EACPC,OAAQ,iBAEZ,CACID,MAAO,gFACPC,OAAQ,0BAEZ,CACID,MAAO,yEACPC,OAAQ,qBAEZ,CACID,MAAO,yEACPC,OAAQ,qBAEZ,CACID,MAAO,qHACPC,OAAQ,gBAEZ,CACID,MAAO,wEACPC,OAAQ,aAEZ,CACID,MAAO,+CACPC,OAAQ,cAEZ,CACID,MAAO,0FACPC,OAAQ,wB,uKCvEhB,IAAMC,EAAOC,IAAOC,IAAV,IAA8BC,YAA9B,IAA0CC,WAuCrCC,E,iLAnCD,IAAD,EAC6BC,KAAKC,MAAhCC,EADF,EACEA,eAAgBC,EADlB,EACkBA,OACvB,OACI,yBAAKC,MAAM,QAEP,yBAAKA,MAAM,QAAQC,MAAO,CAAEC,QAAS,OAAQC,SAAU,OAAQC,eAAgB,WAC3E,kBAAC,IAAD,gCAGJ,yBAAKJ,MAAM,gBACP,yBAAKA,MAAM,aACP,kBAACV,EAAD,SAAQH,EAAOY,GAAQX,MAAvB,MAEJ,yBAAKY,MAAM,cACP,kBAACV,EAAD,UAASH,EAAOY,GAAQV,SAE5B,8BAKJ,6BAEA,yBAAKY,MAAO,CAAEC,QAAS,OAAQC,SAAU,OAAQC,eAAgB,WAC7D,4BACIC,QAAS,kBAAMP,KACfQ,UAAU,eAFd,wB,GA1BAC,IAAMC,WC0BXC,E,2MA9BbC,MAAQ,CACNX,OAAQ,EACRY,MAAM,G,EAGRb,eAAiB,WAGf,IAFA,IAAIc,EAAU,EAAKF,MAAMX,OACrBc,EAAUC,KAAKC,MAAsB,GAAhBD,KAAKE,UACvBH,GAAWD,GAChBC,EAAUC,KAAKC,MAAsB,GAAhBD,KAAKE,UAE5B,EAAKC,SAAS,CACZlB,OAAQc,EACRF,MAAM,K,wEAKR,OACE,yBAAKL,UAAU,eACb,kBAAC,EAAD,CACEP,OAAQH,KAAKc,MAAMX,OACnBY,KAAMf,KAAKc,MAAMC,KACjBb,eAAgBF,KAAKE,sB,GAzBbU,aCQEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8d944de4.chunk.js","sourcesContent":["const quotes = [\r\n    {\r\n        quote: \"All your life you wait, and then it finally comes, and are you ready?\",\r\n        author: \"Anthony Doerr\"\r\n    },\r\n    {\r\n        quote: \"But soft! What light through yonder window breaks? It is the east, and Juliet is the sun.\",\r\n        author: \"William Shakespeare\"\r\n    },\r\n    {\r\n        quote: \"Whenever you feel like criticizing anyone … just remember that all the people in this world haven’t had the advantages that you’ve had.\",\r\n        author: \"F. Scott Fitzgerald\"\r\n    },\r\n    {\r\n        quote: \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\r\n        author: \"Nelson Mandela\"\r\n    },\r\n    {\r\n        quote: \"The way to get started is to quit talking and begin doing.\",\r\n        author: \"Walt Disney\"\r\n    },\r\n    {\r\n        quote: \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.\",\r\n        author: \"Steve Jobs\"\r\n    },\r\n    {\r\n        quote: \"If life were predictable it would cease to be life, and be without flavor.\",\r\n        author: \"Eleanor Roosevelt\"\r\n    },\r\n    {\r\n        quote: \"If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\",\r\n        author: \"Oprah Winfrey\"\r\n    },\r\n    {\r\n        quote: \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\",\r\n        author: \"James Cameron\"\r\n    },\r\n    {\r\n        quote: \"Life is what happens when you're busy making other plans.\",\r\n        author: \"John Lennon\"\r\n    },\r\n    {\r\n        quote: \"Spread love everywhere you go. Let no one ever come to you without leaving happier.\",\r\n        author: \"Mother Teresa\"\r\n    },\r\n    {\r\n        quote: \"When you reach the end of your rope, tie a knot in it and hang on.\",\r\n        author: \"Franklin D. Roosevelt\"\r\n    },\r\n    {\r\n        quote: \"Always remember that you are absolutely unique. Just like everyone else.\",\r\n        author: \"Margaret Mead\"\r\n    },\r\n    {\r\n        quote: \"Don't judge each day by the harvest you reap but by the seeds that you plant.\",\r\n        author: \"Robert Louis Stevenson\"\r\n    },\r\n    {\r\n        quote: \"The future belongs to those who believe in the beauty of their dreams.\",\r\n        author: \"Eleanor Roosevelt\"\r\n    },\r\n    {\r\n        quote: \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\r\n        author: \"Benjamin Franklin\"\r\n    },\r\n    {\r\n        quote: \"The best and most beautiful things in the world cannot be seen or even touched - they must be felt with the heart.\",\r\n        author: \"Helen Keller\"\r\n    },\r\n    {\r\n        quote: \"It is during our darkest moments that we must focus to see the light.\",\r\n        author: \"Aristotle\"\r\n    },\r\n    {\r\n        quote: \"Whoever is happy will make others happy too.\",\r\n        author: \"Anne Frank\"\r\n    },\r\n    {\r\n        quote: \"Do not go where the path may lead, go instead where there is no path and leave a trail.\",\r\n        author: \"Ralph Waldo Emerson\"\r\n    }\r\n];\r\n\r\nexport default quotes","import React, { Component } from \"react\";\r\nimport \"./Quote.css\";\r\nimport styled, { keyframes } from 'styled-components';\r\nimport { fadeIn } from 'react-animations';\r\nimport Typing from 'react-typing-animation';\r\nimport quotes from './QuoteList.js';\r\n\r\n\r\nconst Fade = styled.div`animation: 3s ${keyframes`${fadeIn}`} infinite`;\r\n\r\nclass Quote extends React.Component {\r\n\r\n    render() {\r\n        const {handleGenerate, number } = this.props\r\n        return (\r\n            <div class=\"page\">\r\n\r\n                <div class=\"title\" style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\r\n                    <Typing>Random Quote Generator</Typing>\r\n                </div>\r\n\r\n                <div class=\"randQuoteBox\">\r\n                    <div class=\"randQuote\">\r\n                        <Fade>\"{quotes[number].quote}\"</Fade>\r\n                    </div>\r\n                    <div class=\"randAuthor\">\r\n                        <Fade>- {quotes[number].author}</Fade>\r\n                    </div>\r\n                    <br></br>\r\n                </div>\r\n\r\n\r\n\r\n                <br></br>\r\n\r\n                <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\r\n                    <button\r\n                        onClick={() => handleGenerate()}\r\n                        className=\"quoteButton\">Generate Quote</button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quote\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Quote from \"./Quote.js\";\n\nclass App extends Component {\n  \n  state = {\n    number: 0,\n    fade: false\n  }\n\n  handleGenerate = () => {\n    var pastNum = this.state.number\n    var randNum = Math.floor(Math.random() * 20);\n    while (randNum == pastNum) {\n      randNum = Math.floor(Math.random() * 20)\n    }\n    this.setState({\n      number: randNum,\n      fade: true\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"application\">\n        <Quote\n          number={this.state.number}\n          fade={this.state.fade}\n          handleGenerate={this.handleGenerate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}